body_behavior:
  ros__parameters:
    team_data_timeout: {
      type: int,
      default_value: 2,
      description: "Data older than this is seen as non existent"
    }

    
    ball_max_covariance: {
      type: double,
      default_value: 0.5,
      description: "minimal confidence to regard a ball of a team mate as valid"
    }

    body:
      roles: {
        type: string_array,
        default_value: ["goalie", "offense", "defense"],
      }

      use_localization: {
        type: bool,
        default_value: true,
        description: "When False, the behavior will use a simple fallback mode in which only detected image features are
         used for decision making"
      }

      # Position format:
      #      y
      #      ^       ______________________
      #      |    M  |          |          |  O
      #      |    Y  |_ -x, y   |   x, y  _|  P
      #      |    G  | |        |        | |  P
      # 0    +    O  | |       ( )       | |  G
      #      |    A  |_|        |        |_|  O
      #      |    L  |  -x,-y   |   x,-y   |  A
      #      |       |__________|__________|  L
      #      |
      #      +------------------+--------------> x
      #                         0
      # To be useful for different field sizes, use values in [-1, 1] for x and y

      role_positions:
        goalie: {
          type: double_array,
          default_value: [ -0.95, 0.0 ],
        }
        defense:
          passive: # passive: opponent has kickoff, active: we have kickoff
            # position number 0 = center, 1 = left, 2 = right
            0: {
              type: double_array,
              defaul_value: [ -0.5, 0.0 ],
              descripton: "center"
            }
            1: {
              type: double_array,
              defaul_value: [ -0.45, 0.5 ],
              description: "left"
            }
            2: {
              type: double_array,
              defaul_value: [ -0.45, -0.5 ],
              description: "right"
            }
          active:
            0: {
              type: double_array,
              defaul_value: [ -0.5, 0.0 ],
              descripton: "center"
            }
            1: {
              type: double_array,
              defaul_value: [ -0.45, 0.5 ],
              description: "left"
            }
            2: {
              type: double_array,
              defaul_value: [ -0.45, -0.5 ],
              description: "right"
            }
        offense:
          passive:
            0: {
              type: double_array,
              default_value: [ -0.27, 0.0 ],
              deascription: "center"
            }
            1: {
              type: double_array,
              default_value: [ -0.2, 0.33 ],
              description: "left"
            }
            2: {
              type: double_array,
              default_value: [ -0.2, -0.33 ],
              description: "right"
            }
          active:
            0: {
              type: double_array,
              default_value: [ -0.1, 0.0 ],
              description: "center"
            }
            1: {
              type: double_array,
              default_value: [ -0.085, 0.33 ],
              description: "left"
            }
            2: {
              type: double_array,
              default_value: [ -0.085, -0.33 ],
              description: "right"
            }

      ready_wait_time: {
        type: double,
        default_value: 4.0,
        description: "Time to wait in ready state before moving to role position to 
        give the localization time to converge."
      }

      ball_lost_time: {
        type: double,
        default_value: 8.0,
        description: "When the ball has not been seen for `ball_lost_time` seconds,
        it is considered lost and will be searched"
      }

      goal_alignment_orientation_threshold: {
        type: double,
        default_value: 20.0,
        description: "The orientation threshold defining which range (in Degrees) is acceptable as aligned to the goal (in each direction)"
      }

      goal_lost_time: {
        type: double,
        default_value: 30.0,
        descripton: "When the goal has not been seen for `goal_lost_time` seconds,
        it is considered lost and will be searched"
      }

      ball_close_distance: {
        type: double,
        default_value: 1.5,
        descripton: "When the ball is closer than `ball_close_distance` meters
        it is in a reachable area of the robot"
      }

    
      ball_twist_precision_threshold:
        x_sdev: {
          type: double,
          default_value: 0.3,
          description: "the maximal allowed standard deviation of the ball twist."
        }
        y_sdev: {
          type: double,
          default_value: 0.3,
          description: "the maximal allowed standard deviation of the ball twist."
        }


      ball_twist_lost_time: {
      type: int,
      default_value: 2,
      description: "the duration after which a ball_twist is considered irrelevant."
    }


      ball_position_precision_threshold:
        x_sdev: {
          type: double,
          default_value: 0.5,
          description: "the maximal allowed standard deviation of the ball position on the x axis"
        }
        y_sdev: {
          type: double,
          default_value: 0.5,
          description: "the maximal allowed standard deviation of the ball position on the y axis"
        }

      # An area in which the ball can be kicked
      # defined by min/max x/y values in meters which represent ball positions relative to base_footprint
      # http://www.ros.org/reps/rep-0103.html#axis-orientation
      kick_x_enter: {
        type: double,
        default_value: 0.24
      }
      kick_x_leave: {
        type: double,
        default_value: 0.30
      }
      kick_y_enter: {
        type: double,
        default_value: 0.14
      }
      kick_y_leave: {
        type: double,
        default_value: 0.16
      }

      ball_dangerous_goal_radius: {
        type: double,
        default_value: 0.20,
        description: "defines the radius around the goal (in form of a box)
        in this area, the goalie will react to the ball.
        the radius is the margin around the goal to both y and the positive x directions"
      }


      ball_dangerous_center: {
        type: double,
        default_value: 0.1,
        description: "defines the area in which the goalie will not attempt to fall in front of the ball
        this value represents the y displacement of the ball relative to the center of the robot"
      }

      defensive_area: {
        type: double,
        default_value: 0.5,
        description: "The defensive area is an area in which the players behave more defensive then usual
        (defensive players are actively going to the ball and goalies move in the goal to be able to block the ball).
        This affects the BallInDefensiveArea decision.
        The area is described as portion of the field [0, 1] always measured from the own goal.
        A value of 0.25 means, that the quarter in front of the own goal is the defensive area."
      }

      block_position_goal_offset: {
        type: double,
        default_value: 0.15,
        description: "This is the offset the goalie keeps to avoid crashes with poles when blocking balls.
        The value describes the offset in meters from the goal line."
      }

      block_position_gradient_factor: {
        type: double,
        default_value: 4.0,
        description: "this factor defines how extreme the goalie reacts to a ball offset"
      }

      # configurations for the use of bitbots_dynamic_kick package
      dynamic_kick:
        wait_time: {
          type: double,
          default_value: 10.0,
          description: "time to wait for a dynamic_kick server"
        }
        topic: {
          type: string,
          default_value: "dynamic_kick",
          description: "base topic under which an actionserver listens for KickAction messages",
        }

      # the maximal allowed standard deviation of the localization pose.
      localization_precision_threshold:
        x_sdev: {
          type: double,
          default_value: 0.5,
        }
        y_sdev: {
          type: double,
          default_value: 0.5,
        }
        theta_sdev: {
          type: double,
          default_value: 0.6,
        }


      reorientation_duration: {
          type: double,
          default_value: 10.0,
          description: "Duration for which the robot tries to orient itself, when the localization precision is low."
        }

      reorientation_pause_duration: {
          type: double,
          default_value: 30.0,
          description: "Duration for which the robot pauses between reorientation runs."
        }

      pathfinding_position_threshold: {
          type: double,
          default_value: 0.3,
          description: "minimal difference between the current and the last movebase goal to actually send a new goal."
        }
      pathfinding_orientation_threshold: {
          type: double,
          default_value: 10.0,
        }

      goalpost_safety_distance: {
          type: double,
          default_value: 0.05,
          description: "don't aim closer to goalpost than this"
        }

      ball_far_approach_dist: {
          type: double,
          default_value: 0.5,
          description: "Distance at which the ball is first approached before the ball obstacle is deactivated and we approach closer for the kick"
        }

      ball_far_approach_position_thresh: {
          type: double,
          default_value: 0.2,
          description: "Range in which the ball far approach point is counted as reached"
        }

      ball_reapproach_dist: {
          type: double,
          default_value: 1.0,
          description: "We reapproach the ball after it has moved further away than this distance. This includes movig to the far approach position. 
          Balls further away are also recognized as obstacles."
        }

      ball_approach_dist: {
          type: double,
          default_value: 0.2,
          description: "Distance at which the ball is normally approached"
        }

      ball_reapproach_angle: {
          type: double,
          default_value: 1.2,
          description: "Angle at which the ball is normally approached again"
        }

      # topics the behavior subscribes to
      ball_movement_subscribe_topic: 'ball_relative_movement'

      # The position where the supporter robot should place itself in order to accept a pass
      pass_position_x: {
          type: double,
          default_value: 0.1,
        }
      pass_position_y: {
        type: int,
        default_value: 1,
      }
      supporter_max_x: {
        type: int,
        default_value: 4,
      }

      max_kick_angle: {
          type: double,
          default_value: 1.4,
          description: "maximal angle of a ball kick"
        }  #  (radians)

      num_kick_angles: {
        type: int,
        default_value: 9,
        description: "number of considered kick angles (uneven, otherwise the middle would be excluded)"
      }

      penalty_kick_angle: {
        type: double,
        default_value: 0.44,
        description: "the angle that the kick is done either to the left or right during penalty shoot out"
      }

      # distance from center point, that the ball must be during an opponent kickoff to think that it moved
      kickoff_min_ball_movement: 0.5

      # dribble action
      dribble_max_speed_x: {
        type: double,
        default_value: 0.25,
      }
      dribble_max_speed_y: {
        type: double,
        default_value: 0.08,
      }
      dribble_p: {
        type: double,
        default_value: 0.75,
      }
      dribble_accel_x: {
        type: double,
        default_value: 0.001,
      }

      # dribble decision
      dribble_orient_threshold: {
        type: double,
        default_value: 0.5,
      }
      dribble_goal_distance_threshold: {
        type: double,
        default_value: 1.5,
      }
      dribble_ball_distance_threshold: {
        type: double,
        default_value: 0.5,
      }
      dribble_kick_angle: {
        type: double,
        default_value: 0.6,
      }

      kick_decision_smoothing: {
        type: double,
        default_value: 0.5,
      }

      ##################
      # costmap params #
      ##################

      base_costmap_smoothing_sigma: {
        type: double,
        default_value: 0.3,
        description: "sigma of gaussian blur applied to costmap"
      }

      map_margin: {
        type: double,
        default_value: 1.0,
        description: "margin that is added around the field size when creating the costmap (meters)"
      }

      obstacle_costmap_smoothing_sigma: {
        type: double,
        default_value: 1.5,
        description: "sigma of gaussian blur applied to obstacle costmap"
      }

      goal_value: {
        type: double,
        default_value: 0.0,
        description: "cost in the goal"
      }

      goalpost_value: {
        type: double,
        default_value: 1.0,
        description: "cost at a goalpost"
      }

      corner_value: {
        type: double,
        default_value: 1.0,
        description: "cost in a corner"
      }

      in_field_value_our_side: {
        type: double,
        default_value: 1.5,
        description: "start value on our side"
      }

      keep_out_border: {
        type: double,
        default_value: 0.2,
        description: "dangerous border area width in meters"
      }

      obstacle_cost: {
        type: double,
        default_value: 2.0,
        description: "cost of an obstacle"
      }

      kick_cost_angular_range: {
        type: double,
        default_value: 0.5,
        description: "angular range when estimating kick cost"
      }

      kick_cost_kick_length: {
        type: double,
        default_value: 2.0,
        description: "estimated kick length when estimating kick cost"
      }

      time_to_ball_divider: {
        type: double,
        default_value: 25.0,
        description: "parameters for time_to_ball estimation
        divider of how often the time to ball is updated depending on update rate of the behavior
        example: (125 = 1 per second, 250 = 1 per 2 seconds)"
      }

      time_to_ball_cost_per_meter: {
        type: double,
        default_value: 7.0,
        description: "7 seconds per meter when walking
      # 6 sec per 1.57 rad (90 deg) = 3.82 sec per rad"
      }

      time_to_ball_cost_start_angle: {
        type: double,
        default_value: 3.82,
        description: "factor by which the difference in the starting angle and direction of the path (in rad) is weighted"
      }

      time_to_ball_cost_goal_angle: {
        type: double,
        default_value: 3.82,
        description: "same but for the goal angle"
      }

      time_to_ball_cost_start_to_goal_angle: {
        type: double,
        default_value: 3.82,
        description: "factor by which the difference in starting and goal angle is weighted (only if not turning to ball i.e. <1m)"
      }

      time_to_ball_remember_time: {
        type: double,
        default_value: 1.0,
        description: "seconds after which the time to ball is forgotten if a new path to the ball can not be calculated and evaluated"
      }
